import { type ReactNode } from "react";
import type { InternetIdentityContextType } from "./context.type";
import { type AuthClientCreateOptions } from "@dfinity/auth-client";
import type { LoginOptions } from "./login-options.type";
/**
 * React context for managing the login state and the Internet Identity.
 */
export declare const InternetIdentityContext: import("react").Context<InternetIdentityContextType | undefined>;
/**
 * Hook to access the InternetIdentityContext.
 */
export declare const useInternetIdentity: () => InternetIdentityContextType;
/**
 * Provider component for the InternetIdentityContext.
 * Manages identity state and provides authentication-related functionalities.
 */
export declare function InternetIdentityProvider({ createOptions, loginOptions, children, }: {
    /** Options for creating the {@link AuthClient}. See AuthClient documentation for list of options
     *
     *`ic-use-internet-identity` defaults to disabling the AuthClient idle handling (clearing identities
     * from store and reloading the window on identity expiry). If that behaviour is preferred, set these settings:
     *
     * ```
     * const options = {
     *   idleOptions: {
     *     disableDefaultIdleCallback: false,
     *     disableIdle: false,
     *   },
     * }
     * ```
     */
    createOptions?: AuthClientCreateOptions;
    /** Options that determine the behaviour of the {@link AuthClient} login call. */
    loginOptions?: LoginOptions;
    /** The child components that the InternetIdentityProvider will wrap. This allows any child
     * component to access the authentication context provided by the InternetIdentityProvider. */
    children: ReactNode;
}): import("react/jsx-runtime").JSX.Element;
export * from "./context.type";
export * from "./login-options.type";
