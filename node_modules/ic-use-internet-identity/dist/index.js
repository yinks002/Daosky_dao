// src/index.tsx
import { createContext, useContext, useEffect } from "react";
import { useState } from "react";
import {
  AuthClient
} from "@dfinity/auth-client";
import { jsx } from "react/jsx-runtime";
var InternetIdentityContext = createContext(void 0);
var useInternetIdentity = () => {
  const context = useContext(InternetIdentityContext);
  if (!context) {
    throw new Error(
      "useInternetIdentity must be used within an InternetIdentityProvider"
    );
  }
  return context;
};
function InternetIdentityProvider({
  createOptions,
  loginOptions,
  children
}) {
  const [state, setState] = useState({
    isInitializing: true,
    loginStatus: "idle"
  });
  useEffect(() => {
    (async () => {
      const options = {
        idleOptions: {
          // Default behaviour of this hook is not to logout and reload window on indentity expiration
          disableDefaultIdleCallback: true,
          disableIdle: true,
          ...createOptions?.idleOptions
        },
        ...createOptions
      };
      const authClient = await AuthClient.create(options);
      const isAuthenticated = await authClient.isAuthenticated();
      setState((prevState) => ({
        ...prevState,
        authClient
      }));
      if (isAuthenticated) {
        const identity = authClient.getIdentity();
        if (identity) {
          setState((prevState) => ({
            ...prevState,
            identity
          }));
        }
      }
      setState((prevState) => ({
        ...prevState,
        isInitializing: false
      }));
    })();
  }, [createOptions]);
  function onLoginSuccess() {
    const identity = state.authClient?.getIdentity();
    if (!identity) {
      throw new Error("Identity not found after successful login");
    }
    setState((prevState) => ({
      ...prevState,
      loginStatus: "success",
      identity
    }));
  }
  function onLoginError(error) {
    setState((prevState) => ({
      ...prevState,
      loginStatus: "error",
      loginError: new Error(error)
    }));
  }
  async function login() {
    if (!state.authClient) {
      throw new Error("Auth client not initialized");
    }
    if (await state.authClient.isAuthenticated()) {
      throw new Error("User is already authenticated");
    }
    setState((prevState) => ({
      ...prevState,
      loginStatus: "logging-in"
    }));
    const options = {
      identityProvider: process.env.II_URL,
      onSuccess: onLoginSuccess,
      onError: onLoginError,
      maxTimeToLive: BigInt(36e11),
      // Defaults to 1 hour
      ...loginOptions
    };
    state.authClient.login(options);
  }
  async function clear() {
    if (!state.authClient) {
      throw new Error("Auth client not initialized");
    }
    await state.authClient.logout();
    setState((prevState) => ({
      ...prevState,
      identity: void 0,
      loginStatus: "idle"
    }));
  }
  return /* @__PURE__ */ jsx(
    InternetIdentityContext.Provider,
    {
      value: {
        isInitializing: state.isInitializing,
        login,
        loginStatus: state.loginStatus,
        loginError: state.loginError,
        isLoggingIn: state.loginStatus === "logging-in",
        isLoginError: state.loginStatus === "error",
        isLoginSuccess: state.loginStatus === "success",
        isLoginIdle: state.loginStatus === "idle",
        clear,
        identity: state.identity
      },
      children
    }
  );
}
export {
  InternetIdentityContext,
  InternetIdentityProvider,
  useInternetIdentity
};
