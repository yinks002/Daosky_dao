import { type ActorConfig, type ActorSubclass, type HttpAgentOptions, type Identity, type HttpDetailsResponse } from "@dfinity/agent";
import { type ReactNode, type Context } from "react";
import { IDL } from "@dfinity/candid";
import type { InterceptorErrorData, InterceptorRequestData, InterceptorResponseData } from "./interceptor-data.type";
/**
 * Re-export types
 */
export * from "./interceptor-data.type";
/**
 * The ActorContextType type represents the type of the React context that will be used to pass the actor down the component tree.
 */
export type ActorContextType<T> = {
    actor?: ActorSubclass<T>;
};
/**
 * Creates a React context that will be used to pass the actor down the component tree. Invoke the `createActorContext` function with the _SERVICE
 * type argument, where _SERVICE represents the canister service definition.
 *
 * @example
 * ```ts
 * const ActorContext = createActorContext<_SERVICE>();
 * ```
 */
export declare function createActorContext<T>(): Context<ActorContextType<T>>;
/**
 * Re-export of the HttpAgentOptions type from the dfinity/agent package as it is not exported there.
 */
export declare class AgentHTTPResponseError extends Error {
    readonly response: HttpDetailsResponse;
    constructor(message: string, response: HttpDetailsResponse);
}
/**
 * Type guard that returns true if the error is an instance of the AgentHTTPResponseError class.
 */
export declare function isAgentHTTPResponseError(error: unknown): error is AgentHTTPResponseError;
/**
 * Returns true if the users identity has expired. The user will need to sign in again to get a new identity.
 */
export declare function isIdentityExpiredError(error: unknown): boolean;
/**
 * Creates a React hook that can be used to access the actor from any component in the component tree. Invoke the `createUseActorHook` function with the
 * React context returned by the `createActorContext` function. The function needs to be invoked with the _SERVICE type argument, where _SERVICE
 * represents the canister service definition. Export the hook to be able to use it in other components.
 *
 * @example
 * ```ts
 * export const useActor = createUseActorHook<_SERVICE>(actorContext);
 * ```
 */
export declare function createUseActorHook<T>(context: Context<ActorContextType<T>>): () => ActorContextType<T>;
/**
 * The ActorProvider component is used to provide the actor to the component tree. The component needs to be wrapped around the component tree that
 * needs to access the actor.
 *
 * @example
 * ```tsx
 * import { ReactNode } from "react";
 * import {
 *   ActorProvider,
 *   createActorContext,
 *   createUseActorHook,
 * } from "ic-use-actor";
 * import {
 *  canisterId,
 *   idlFactory,
 * } from "path-to/your-service/index";
 * import { _SERVICE } from "path-to/your-service.did";
 * import { useSiweIdentity } from "ic-use-siwe-identity";
 *
 * const actorContext = createActorContext<_SERVICE>();
 * export const useActor = createUseActorHook<_SERVICE>(actorContext);
 *
 * export default function Actors({ children }: { children: ReactNode }) {
 *   const { identity } = useSiweIdentity();
 *
 *   return (
 *     <ActorProvider<_SERVICE>
 *       canisterId={canisterId}
 *       context={actorContext}
 *       identity={identity}
 *       idlFactory={idlFactory}
 *     >
 *       {children}
 *     </ActorProvider>
 *   );
 * }
 * ```
 */
export declare function ActorProvider<T>({ httpAgentOptions, actorOptions, context, identity, idlFactory, canisterId, children, onRequest, onResponse, onRequestError, onResponseError, }: {
    /** Options for configuring the HTTP agent. This can include custom headers, credentials, and other settings related to network requests. */
    httpAgentOptions?: HttpAgentOptions;
    /** Configuration that can be passed to customize the Actor behaviour. */
    actorOptions?: ActorConfig;
    /** The React context to which the actor will be provided. This context will be used to pass the actor down the component tree. */
    context: React.Context<ActorContextType<T>>;
    /** The identity used for signing requests. */
    identity?: Identity;
    /** A factory function provided by the DFINITY Candid library to generate the interface for the actor. */
    idlFactory: IDL.InterfaceFactory;
    /** The unique identifier of the canister that the actor will interact with.*/
    canisterId: string;
    /** The React component(s) that will be wrapped by the ActorProvider. */
    children: ReactNode;
    /** Callback function that will be called before the request is sent. */
    onRequest?: (data: InterceptorRequestData) => unknown[];
    /** Callback function that will be called before the response is returned. */
    onResponse?: (data: InterceptorResponseData) => unknown;
    /** Callback function that will be called if the request fails. */
    onRequestError?: (data: InterceptorErrorData) => Error | TypeError | unknown;
    /** Callback function that will be called if the response fails. */
    onResponseError?: (data: InterceptorErrorData) => Error | TypeError | unknown;
}): import("react/jsx-runtime").JSX.Element;
